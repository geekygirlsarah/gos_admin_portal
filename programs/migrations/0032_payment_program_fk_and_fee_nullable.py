# Generated by Junie to add Payment.program FK and make Payment.fee optional
from django.db import migrations, models
import django.db.models.deletion


def forwards_func(apps, schema_editor):
    Payment = apps.get_model('programs', 'Payment')
    # Backfill program from existing fee relations where possible
    for p in Payment.objects.all().select_related('fee'):
        if getattr(p, 'program_id', None):
            continue
        fee = getattr(p, 'fee', None)
        if fee and getattr(fee, 'program_id', None):
            p.program_id = fee.program_id
            p.save(update_fields=['program_id'])


def reverse_func(apps, schema_editor):
    # No-op: cannot reliably restore previous state
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('programs', '0031_parent_email_updates'),
    ]

    operations = [
        # 1) Add program field as nullable initially to allow data migration
        migrations.AddField(
            model_name='payment',
            name='program',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='programs.program'),
        ),
        # 2) Alter fee to be optional and SET_NULL on delete
        migrations.AlterField(
            model_name='payment',
            name='fee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='programs.fee'),
        ),
        # 3) Data migration to populate program from fee.program
        migrations.RunPython(forwards_func, reverse_func),
        # 4) Make program non-nullable
        migrations.AlterField(
            model_name='payment',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='programs.program'),
        ),
    ]
