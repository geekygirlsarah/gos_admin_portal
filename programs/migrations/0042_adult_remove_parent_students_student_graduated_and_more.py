# Generated by Django 4.2.24 on 2025-09-26 23:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.core.management.color import no_style


def migrate_parent_to_adult_and_clean(apps, schema_editor):
    """
    - Copy Parent rows into Adult preserving primary keys so existing student FK ids remain valid.
    - Null any Student primary/secondary contact ids that don't correspond to an Adult.
    """
    # Historical models
    Parent = apps.get_model('programs', 'Parent')
    Student = apps.get_model('programs', 'Student')
    Adult = apps.get_model('programs', 'Adult')

    # 1) Copy Parent -> Adult, preserving IDs
    for p in Parent.objects.all().iterator():
        # Required fields with safe fallbacks
        first = getattr(p, 'first_name', None) or getattr(p, 'preferred_first_name', None) or 'Parent'
        last = getattr(p, 'last_name', None) or 'Unknown'
        defaults = {
            'first_name': first,
            'preferred_first_name': getattr(p, 'preferred_first_name', None),
            'last_name': last,
            'pronouns': getattr(p, 'pronouns', None),
            'relationship_to_student': 'parent',
            'email': getattr(p, 'email', None),
            'phone_number': getattr(p, 'phone_number', None),
            'cell_phone': getattr(p, 'cell_phone', None),
            'home_phone': getattr(p, 'home_phone', None),
            'personal_email': getattr(p, 'personal_email', None),
            'email_updates': getattr(p, 'email_updates', False),
            'active': getattr(p, 'active', True),
            'is_parent': True,
            'is_mentor': False,
            'is_alumni': getattr(p, 'is_alumni', False) if hasattr(p, 'is_alumni') else False,
        }
        # Create/update Adult with the SAME primary key as Parent
        Adult.objects.update_or_create(id=getattr(p, 'id'), defaults=defaults)

    # 2) Null any student contact ids that don't match an Adult id
    valid_ids = set(Adult.objects.values_list('id', flat=True))
    Student.objects.filter(primary_contact__isnull=False).exclude(
        primary_contact_id__in=valid_ids
    ).update(primary_contact=None)
    Student.objects.filter(secondary_contact__isnull=False).exclude(
        secondary_contact_id__in=valid_ids
    ).update(secondary_contact=None)


def reset_adult_pk_sequence(apps, schema_editor):
    """
    Reset the Adult PK sequence in a portable way.
    - On PostgreSQL, emits setval to MAX(id).
    - On SQLite and other backends, this is a safe no-op.
    """
    Adult = apps.get_model('programs', 'Adult')
    connection = schema_editor.connection
    try:
        sql_list = connection.ops.sequence_reset_sql(no_style(), [Adult])
        if sql_list:
            with connection.cursor() as cursor:
                for sql in sql_list:
                    cursor.execute(sql)
    except Exception:
        # If backend doesn't support sequences or any error occurs, skip silently.
        pass


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('programs', '0041_add_signout_feature'),
    ]

    operations = [
        migrations.CreateModel(
            name='Adult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_parent', models.BooleanField(default=False, help_text='Check if this adult is a parent/guardian of any student.')),
                ('is_mentor', models.BooleanField(default=False, help_text='Check if this adult serves as a mentor/volunteer.')),
                ('is_alumni', models.BooleanField(default=False, help_text='Check if this adult is a program alumni.')),
                ('first_name', models.CharField(max_length=150)),
                ('preferred_first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(max_length=150)),
                ('pronouns', models.CharField(blank=True, max_length=50, null=True)),
                ('relationship_to_student', models.CharField(choices=[('parent', 'Parent'), ('mother', 'Mother'), ('father', 'Father'), ('grandparent', 'Grandparent'), ('grandmother', 'Grandmother'), ('grandfather', 'Grandfather'), ('pibling', 'Pibling'), ('aunt', 'Aunt'), ('uncle', 'Uncle'), ('sibling', 'Sibling'), ('sister', 'Sister'), ('brother', 'Brother'), ('friend', 'Friend'), ('guardian', 'Guardian'), ('other', 'Other')], default='parent', max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=30, null=True)),
                ('cell_phone', models.CharField(blank=True, max_length=30, null=True)),
                ('home_phone', models.CharField(blank=True, max_length=30, null=True)),
                ('personal_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('start_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('role', models.CharField(choices=[('mentor', 'Mentor'), ('volunteer', 'Volunteer'), ('chaperone', 'Chaperone')], default='mentor', max_length=20)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photos/adults/')),
                ('andrew_id', models.CharField(blank=True, max_length=50, null=True)),
                ('andrew_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('andrew_id_expiration', models.DateField(blank=True, null=True)),
                ('on_discord', models.BooleanField(default=False)),
                ('discord_username', models.CharField(blank=True, max_length=100, null=True)),
                ('has_cmu_id_card', models.BooleanField(default=False)),
                ('has_cmu_building_access', models.BooleanField(default=False)),
                ('has_google_team_drive_access', models.BooleanField(default=False)),
                ('has_google_mentor_drive_access', models.BooleanField(default=False)),
                ('has_google_admin_drive_access', models.BooleanField(default=False)),
                ('on_first_website', models.BooleanField(default=False)),
                ('signed_first_consent_form', models.BooleanField(default=False)),
                ('on_canvas', models.BooleanField(default=False)),
                ('has_zoom_account', models.BooleanField(default=False)),
                ('in_onshape_classroom', models.BooleanField(default=False)),
                ('on_canva', models.BooleanField(default=False)),
                ('on_google_mentor_group', models.BooleanField(default=False)),
                ('on_google_field_crew_group', models.BooleanField(default=False)),
                ('has_paca_clearance', models.BooleanField(default=False)),
                ('has_patch_clearance', models.BooleanField(default=False)),
                ('has_fbi_clearance', models.BooleanField(default=False)),
                ('pa_clearances_expiration_date', models.DateField(blank=True, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=150, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=30, null=True)),
                ('email_updates', models.BooleanField(default=False, help_text='If checked, this adult will receive email updates.')),
                ('active', models.BooleanField(default=True)),
                ('alumni_email', models.EmailField(blank=True, help_text='Preferred contact email after graduation', max_length=254, null=True)),
                ('college', models.CharField(blank=True, max_length=200, null=True)),
                ('field_of_study', models.CharField(blank=True, max_length=200, null=True)),
                ('employer', models.CharField(blank=True, max_length=200, null=True)),
                ('job_title', models.CharField(blank=True, max_length=200, null=True)),
                ('ok_to_contact', models.BooleanField(default=True, help_text='Consents to be contacted about news/opportunities')),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('andrew_id_sponsor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sponsored_andrew_ids', to='programs.adult')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.RemoveField(
            model_name='parent',
            name='students',
        ),
        migrations.AddField(
            model_name='student',
            name='graduated',
            field=models.BooleanField(default=False, help_text='Check if this student has graduated.'),
        ),
        migrations.DeleteModel(
            name='Alumni',
        ),
        migrations.AddField(
            model_name='adult',
            name='students',
            field=models.ManyToManyField(blank=True, related_name='adults', to='programs.student'),
        ),
        migrations.AddField(
            model_name='adult',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='adult_profile', to=settings.AUTH_USER_MODEL),
        ),
        # Merge step: copy Parent -> Adult, clean invalid student contacts, and reset PK sequence
        migrations.RunPython(migrate_parent_to_adult_and_clean, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(reset_adult_pk_sequence, reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name='student',
            name='primary_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_for', to='programs.adult'),
        ),
        migrations.AlterField(
            model_name='student',
            name='secondary_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secondary_for', to='programs.adult'),
        ),
        migrations.DeleteModel(
            name='Parent',
        ),
    ]
